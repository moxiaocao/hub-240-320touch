#include <main.h>
#include "..\src\custom\custom.h"
#include "..\src\generated\gui_guider.h"
#include "..\src\generated\events_init.h"
#include "..\..\lvgl\src\porting\lv_port_indev.h"
#include <usb_control.h>


//#include "..\..\src\custom\custom.h"
//#include "..\..\src\generated\gui_guider.h"



TFT_eSPI tft = TFT_eSPI();


extern Usb usba;

hw_timer_t *timer = NULL;

lv_ui guider_ui;


void timer_interrupt();

static lv_disp_draw_buf_t draw_buf;       //定义显示器变量
static lv_color_t buf[TFT_WIDTH * 10];    //定义刷新缓存

void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p)
{
    uint32_t w = (area->x2 - area->x1 + 1);
    uint32_t h = (area->y2 - area->y1 + 1);
 
    tft.startWrite();                                        //使能写功能
    tft.setAddrWindow(area->x1, area->y1, w, h);             //设置填充区域
    tft.pushColors((uint16_t *)&color_p->full, w * h, true); //写入颜色缓存和缓存大小
    tft.endWrite();                                          //关闭写功能
 
    lv_disp_flush_ready(disp); //调用区域填充颜色函数
}

void setup() {
/********定时器配置**********/
//50ms
  timer = timerBegin(0, 40000, true);
  timerAttachInterrupt(timer, timer_interrupt, true);
  timerAlarmWrite(timer, 5000, true);
  timerAlarmEnable(timer);
/********屏幕初始化**********/  
  tft.init(); //初始化

  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK); //填充全屏幕
  tft.invertDisplay(1);//反转显示颜色i = 1反转，i = 0正常
  // tft.setTextSize(3);
/********** LVGL初始化 **********/
  lv_init();
  lv_disp_draw_buf_init(&draw_buf, buf, NULL, TFT_WIDTH * 10);

  static lv_disp_drv_t disp_drv;
  lv_disp_drv_init(&disp_drv);
  
  disp_drv.hor_res = TFT_HEIGHT;
  disp_drv.ver_res = TFT_WIDTH;
  disp_drv.flush_cb = my_disp_flush;
  disp_drv.draw_buf = &draw_buf;
  lv_disp_drv_register(&disp_drv);
  /*获取LVGL版本信息*/
  // String LVGL_Arduino = "Hello LVGL! ";
  // LVGL_Arduino += String('V') + lv_version_major() + "." + lv_version_minor() + "." + lv_version_patch(); //版本
  // lv_obj_t *label = lv_label_create(lv_scr_act());
  // lv_label_set_text(label, LVGL_Arduino.c_str());
  // lv_obj_align(label, LV_ALIGN_CENTER, 0, 0); //居中显示
  const struct device *display_dev;
/********串口初始化*********/
  Serial.begin(9600);

  
  lv_port_indev_init();
    

  setup_ui(&guider_ui);
  events_init(&guider_ui);
    
/********编码器初始化*********/


/********键盘模拟初始化*********/

/********USB上下行初始化*******/
  Usb_Control_Init(&usba);
  Input_Signal_Set(typec1);


}

void loop() {


  lv_task_handler(); /* 令LVGL工作 */
  

}

void timer_interrupt() {
  
  


/*********** usb数据读取 ***********/
   Usb_Value_Get(&usba);

}
